// class Solution {

//     public int func(int idx, int buy, int cap,int[] prices){
//         if(cap == 0 || idx == prices.length) return 0; //base case
//         //BUY+SELL - > 1 complete transaction..Thus cap-1 nly when buy nd sell
//         if(buy==1) {
//             //either buy the stock or skip -> u can't sell'
//             return Math.max(-prices[idx]+func(idx+1,0,cap,prices),
//                         0+func(idx+1,1,cap,prices)
//             );
//         }
//         //sell
//         return Math.max(prices[idx]+func(idx+1,1,cap-1,prices),
//                     0+func(idx+1,0,cap,prices));
//     }

//     public int maxProfit(int[] prices) {

//         //without memoization->201 / 214 testcases passed
//         //T.c : O(2^N) ->yes r No
//         //dp: N x 2 x 3 -> idx , buy(0,1), cap(0,1,2)
//         return func(0,1,2,prices); //2->atmost two transactions //1->can buy
//     }
// }
class Solution {
    public int maxProfit(int[] prices) {
            int sell1 = 0, sell2 = 0, buy1 = Integer.MIN_VALUE, buy2 = Integer.MIN_VALUE;
            for (int i = 0; i < prices.length; i++) {
                //we are calculating max profit at every step->like local maxima local minima
                //at first we don't have money, so borrow'
                buy1 = Math.max(buy1, -prices[i]);
                //return the money and profit is yours
                sell1 = Math.max(sell1, buy1 + prices[i]);
                //now buy next stock with remaining money
                buy2 = Math.max(buy2, sell1 - prices[i]);
                //now the overall profit of 2 transactions lies in sell2
                sell2 = Math.max(sell2, buy2 + prices[i]);
                System.out.println(buy1+" "+sell1+" "+buy2+" "+sell2);
            }
            return sell2;
        }
}
