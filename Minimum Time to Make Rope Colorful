Alice has n balloons arranged on a rope. You are given a 0-indexed string colors where colors[i] is the color of the ith balloon.

Alice wants the rope to be colorful. She does not want two consecutive balloons to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it colorful. You are given a 0-indexed integer array neededTime where neededTime[i] is the time (in seconds) that Bob needs to remove the ith balloon from the rope.

Return the minimum time Bob needs to make the rope colorful.

 

Example 1:


Input: colors = "abaac", neededTime = [1,2,3,4,5]
Output: 3
Explanation: In the above image, 'a' is blue, 'b' is red, and 'c' is green.
Bob can remove the blue balloon at index 2. This takes 3 seconds.
There are no longer two consecutive balloons of the same color. Total time = 3.
Example 2:


Input: colors = "abc", neededTime = [1,2,3]
Output: 0
Explanation: The rope is already colorful. Bob does not need to remove any balloons from the rope.
Example 3:


Input: colors = "aabaa", neededTime = [1,2,3,4,1]
Output: 2
Explanation: Bob will remove the ballons at indices 0 and 4. Each ballon takes 1 second to remove.
There are no longer two consecutive balloons of the same color. Total time = 1 + 1 = 2.
 
 
 SOLUTION
 --------
 
 class Solution {
    public int minCost(String s, int[] cost) {
        int result = 0;
        char[] a = s.toCharArray();
        //int max = 0; 
        for(int i = 0; i < a.length-1; ++i){
            if(a[i] == a[i+1]){
                result += Math.min(cost[i+1], cost[i]);
                System.out.println(result);
                //if(cost[max] < cost[i]) max = i; 
            }
            //else max = i; 
         }
        return result;
    }
}

only 32/113 test cases passed for above solution. The error is that I tried to compare the adjacent balloons and take its miinimum. In that case balloons may repeat.
EX: "aaabbbabbbb"
[3,5,10,7,5,3,5,5,4,8,1]

In this case "bbbb" : 4 is taken into consideration twice[5 - 4, 4 - 8]. This instead on 26 gives o/p as 25

Thus we should have a pointer max which points to the remaining balloons only and we choose from that and keep changing maximum accordingly.

class Solution {
    public int minCost(String s, int[] cost) {
        int result = 0;
        char[] a = s.toCharArray();
        int max = 0; 
        for(int i = 1; i < a.length; ++i){
            if(a[i] == a[max]){
                result += Math.min(cost[max], cost[i]);
                //System.out.println(result);
                if(cost[max] < cost[i]) max = i; 
            }
            else max = i; 
         }
        return result;
    }
}
