Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.

Implement the TimeMap class:

TimeMap() Initializes the object of the data structure.
void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.
String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns "".
 

Example 1:

Input
["TimeMap", "set", "get", "get", "set", "get", "get"]
[[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]]
Output
[null, null, "bar", "bar", null, "bar2", "bar2"]

Explanation
TimeMap timeMap = new TimeMap();
timeMap.set("foo", "bar", 1);  // store the key "foo" and value "bar" along with timestamp = 1.
timeMap.get("foo", 1);         // return "bar"
timeMap.get("foo", 3);         // return "bar", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is "bar".
timeMap.set("foo", "bar2", 4); // store the key "foo" and value "bar2" along with timestamp = 4.
timeMap.get("foo", 4);         // return "bar2"
timeMap.get("foo", 5);         // return "bar2"


NOTE
----
key ,  value --> pair
          |
         \ /
          
        [timestamp,value]
        
Thus a key has a list of list which has multiple values with timestamps

Constraints:

1 <= key.length, value.length <= 100
key and value consist of lowercase English letters and digits.
1 <= timestamp <= 107
All the timestamps timestamp of set are strictly increasing.
At most 2 * 105 calls will be made to set and get.

Pre-requisites:
---------------
TreeMap: A TreeMap can have only one null key but can have multiple null values.TreeMapare sorted naturally (ascending order).
         TreeMap in Java does not allow null keys (like Map) and thus a NullPointerException is thrown. However, multiple null values can be associated with different keys.
FloorKey: The floorKey (K key) method is used to return the greatest key less than or equal to the given key, or null if there is no such key.
Ex:   treemap.put(5, "five");

      System.out.println("Checking greatest key less than or equal to 4");
      System.out.println("Value is: "+ treemap.floorKey(4));

SOLUTION
--------

class TimeMap {
     //should be treemap<int,string> coz floorkey takes key value and gives less than or equal to key
    private static String DEFAULT = "";
    //private static HashMap<String,TreeMap<String,Integer>> map;
    private static HashMap<String,TreeMap<Integer,String>> map;

    public TimeMap() {
        map = new HashMap<>();
    }
    
    public void set(String key, String value, int timestamp) {
        //check if the key already has a value or not
        TreeMap<Integer,String> timeMap;
        if(map.containsKey(key)){
            timeMap = map.get(key); //returns its value
        }
        else{
            timeMap = new TreeMap<>(); //created
            map.put(key,timeMap); //inserted
        }
        timeMap.put(timestamp,value);
    }
    
    public String get(String key, int timestamp) {
        //to get the specific value
        if(map.containsKey(key)){
            TreeMap<Integer,String> timeMap = map.get(key);
            Integer floor_key = timeMap.floorKey(timestamp); //shows error becoz key is in string and we are storing it in an integer...thus to get the exact location of the value of our required key. store corrctlt..
            if(floor_key != null) return timeMap.get(floor_key);
        }
        return DEFAULT;
    }
}

/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap obj = new TimeMap();
 * obj.set(key,value,timestamp);
 * String param_2 = obj.get(key,timestamp);
 */
 
 
 In this solution, if we have timestamp sorted in asc order, we can use binary search which is O(logn) complexity which is much more efficient
 
 class TimeValue {
    String val;
    int timestamp;
    
    public TimeValue(String value, int timestamp){
        this.timestamp = timestamp;
        this.val = value;
    }
}


class TimeMap {
    
    //Map<String,List<String,Integer>> map;
    Map<String,List<TimeValue>> map;
    public TimeMap() {
        map = new HashMap<>();
    }
    
    public void set(String key, String value, int timestamp) {
        //computeIfAbsent takes two parameters: key and a function
        map.computeIfAbsent(key, k -> new ArrayList<>()).add(new TimeValue(value,timestamp));
    }
    
    public String get(String key, int timestamp) {
        List<TimeValue> list = map.getOrDefault(key,null);
        if(list == null) return "";
        int low=0,high=list.size()-1;
        if(list.get(low).timestamp > timestamp) return "";
        if(list.get(high).timestamp <= timestamp) return list.get(high).val;
        while(low < high){
            int mid = (low+high) / 2;
            if(list.get(mid).timestamp == timestamp) return list.get(mid).val;
            if(list.get(mid).timestamp < timestamp) low = mid+1;
            else high = mid-1;
        }
        return list.get(low-1).val;
    }
}

/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap obj = new TimeMap();
 * obj.set(key,value,timestamp);
 * String param_2 = obj.get(key,timestamp);
 */
 
 
 
