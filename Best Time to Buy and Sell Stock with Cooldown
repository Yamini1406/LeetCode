https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/

You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]
Example 2:

Input: prices = [1]
Output: 0
 

Constraints:

1 <= prices.length <= 5000
0 <= prices[i] <= 1000


SOLUTION
--------

class Solution {

    public int func(int idx, int buy, int[] prices, int dp[][]){
        if(idx >= prices.length) return 0;
        if(dp[idx][buy]!=0) return dp[idx][buy];
        if(buy==1) {
            return dp[idx][buy] = Math.max(-prices[idx]+func(idx+1, 0, prices, dp),
                                            0+func(idx+1, 1, prices, dp)
                                        );
        }
        return dp[idx][buy] = Math.max(prices[idx]+func(idx+2, 1, prices, dp),
                                        0+func(idx+1, 0, prices, dp)   
                                    );
    }

    public int maxProfit(int[] prices) {
        //the trick here is after sell->compulsory cooldown day
        //we have two options everytime
        //buy  -> (sell, cooldown)
        //sell -> (cooldown)
        //cooldown -> buy, sell(depends)
        //thus TC = O(2^N)
        //This is similar to Buy nd sell stock -II (i.e; unlimited transactions but with cooldown)
        //Buy -> i+1
        //sell -> i+2

        //for dp: changing variables are idx and buy(or sell)
        int dp[][] = new int[prices.length][2];
        return func(0, 1, prices, dp);


    }
}
