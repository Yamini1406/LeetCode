https://leetcode.com/problems/possible-bipartition/description/

We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.

Given the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.


Example 1:

Input: n = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: group1 [1,4] and group2 [2,3].
Example 2:

Input: n = 3, dislikes = [[1,2],[1,3],[2,3]]
Output: false
Example 3:

Input: n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
Output: false
 

Constraints:

1 <= n <= 2000
0 <= dislikes.length <= 104
dislikes[i].length == 2
1 <= dislikes[i][j] <= n
ai < bi
All the pairs of dislikes are unique.

SOLUTION
--------

class Solution {
    public boolean possibleBipartition(int N, int[][] dislikes) {
        List<List<Integer>> graph = new ArrayList<>();
        
        for(int i = 0; i <= N; i++) {
            graph.add(new ArrayList<Integer>());
        }
        
        for(int[] a: dislikes) {
            graph.get(a[0]).add(a[1]);
            graph.get(a[1]).add(a[0]);
        }
        
        int[] colors = new int[N+1];
        
        for(int i = 1; i <= N; i++) { // graph can have multiple components, hence try dfs from each node
        //for disjoint sets such as [[1,2],[3,4],[4,5],[3,5]]
            //only VISIT the uncolored NODE
            if(colors[i] == 0) { // node is not part of 1 of the previously visited components
                colors[i] = 1; // paint red
                boolean res = dfs(graph, i, colors);
                if(!res) {
                    return false;
                }
            }
            //System.out.println('1');
        }
        
        return true;
    }
    
    public boolean dfs(List<List<Integer>> graph, int cur, int[] colors) {
        
        for(int adj : graph.get(cur)) {
            if(colors[cur] == colors[adj]) {
                return false;
            }
            //Just don't give else - > WILL GO IN INIFINITE LOOP...We wanna visit only unvisited nodes
            else if(colors[adj] == 0) {
                colors[adj] = -colors[cur]; // paint with other color than the current node
                boolean res = dfs(graph, adj, colors);
                if(!res) {
                    return false;
                }
            }
        }
        
        return true;
    }
}
