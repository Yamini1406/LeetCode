https://leetcode.com/problems/word-pattern/description/

Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"
Output: true
Example 2:

Input: pattern = "abba", s = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false
 

Constraints:

1 <= pattern.length <= 300
pattern contains only lower-case English letters.
1 <= s.length <= 3000
s contains only lowercase English letters and spaces ' '.
s does not contain any leading or trailing spaces.
All the words in s are separated by a single space.


SOLUTION
--------

class Solution {
    public boolean wordPattern(String pattern, String s) {
       /* The code then iterates through each character in pattern, and for each character, it extracts the corresponding word from the words array. It then checks whether the character is already in charToWord. If it is not, it adds the character and the corresponding word to both charToWord and wordToChar. If the character is already in charToWord, the code checks whether the stored word in charToWord for that character is the same as the extracted word. If they are not the same, the function returns false*/
       
       String words[] = s.split(" ");
       if(pattern.length()!=words.length) return false;

       Map<Character, String> charToWord = new HashMap<>();
       //I thought charToWord map alone is enough..but given that there is a bijection means evry func should have unique value while mapping
       //EX: abba -> dog dog dog dog...If used only charToWord, returns TRUE which is not right
       //Thus if a word already exists, check if the character matches or not
       Map<String, Character> wordToChar = new HashMap<>();

       for(int i=0;i<pattern.length();i++) {
           char c = pattern.charAt(i);
           String word = words[i];
           if(!charToWord.containsKey(c)) charToWord.put(c, word);
           if(!wordToChar.containsKey(word)) wordToChar.put(word, c);
           if(!charToWord.get(c).equals(word) || !wordToChar.get(word).equals(c)) return false;
       }
       return true;

    }
}
