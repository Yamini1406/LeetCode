https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/

You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104

SOLUTION
--------

class Solution {
    public int maxProfit(int[] prices) {
        
        int profit = 0;
        int maxP = 0;
        
        int left = 0; //pointer to buy
        int right = 1;//pointer to sell
        
        while(right < prices.length){
        
            //we buy and sell on different days so not l=r=0;

            //the day we sell, the amt must be greater than the day you buy.

            if(prices[left] < prices[right]){

                //if so,calculate the profit and check if maximum
                profit = prices[right] - prices[left];
                maxP = Math.max(maxP,profit);

            }
            else{
                //if right<left, we have found even smaller value where we can buy so l = r
                left = right;
            }
            //by default r is incr everytime coz we compare profit everytime
            right+=1;
        }
        return maxP;
    }
}
