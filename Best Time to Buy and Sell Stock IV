https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/description/

You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
 

Constraints:

1 <= k <= 100
1 <= prices.length <= 1000
0 <= prices[i] <= 1000

SOLUTION
--------

class Solution {

    public int func(int idx, int buy, int cap, int[] prices, int[][][] dp) {
        if(cap==0||prices.length==idx) return 0;
        if(dp[idx][buy][cap]!=0) return dp[idx][buy][cap];
        if(buy==1) {
            return dp[idx][buy][cap] = Math.max(-prices[idx]+func(idx+1, 0, cap, prices,dp),
                            0+func(idx+1, 1, cap, prices, dp)
            );
        }
        return dp[idx][buy][cap] = Math.max(prices[idx]+func(idx+1,1,cap-1,prices,dp),
                                            0+func(idx+1,0,cap,prices,dp)
                                            );
    }

    public int maxProfit(int k, int[] prices) {
        int dp[][][] = new int[prices.length][2][k+1];
        return func(0, 1, k, prices, dp);   
    }
}
