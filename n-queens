https://leetcode.com/problems/n-queens/


The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9


IDEOLOGY
--------

 - > A queen should not be placed in the same row. Thus when a qqueen is placed in a row, we move forward to the next row
 - > We keep a checklist(map) of RightDiagonal, LeftDiagonal and Columns visited. These follow a pattern
 
A 4-queen problem for example has:

RightDiagonal:                                                           LeftDiagonal:
(n+row-column) :since we get -ve values we do +n.                        (row+col)
4|3|2|1                                                                   0|1|2|3                    
-------                                                                   -------
5|4|3|2                                                                   1|2|3|4
-------                                                                   -------
6|5|4|3                                                                   2|3|4|5
-------                                                                   --------
7|6|5|4                                                                   3|4|5|6

- > If a queen is already placed, all its diagonal elements will be updated as they have the same value and will be mapped as true.
- > If unable to place in any column of a row, we bactrack and update it's original value.

Time complexity: O(N*N!) : if we place a queen in first row, then the possibilty in next row in (n-1) then (n-2)... and so on. Now to backtrack we can do
atmost N times.

solutions:
----------

USING MAP FUNCTION
------------------

class Solution {
public:
    vector<vector<string>> ans;
    map<int,bool> column;
    map<int,bool> posDiag;
    map<int,bool> negDiag;
    
    void do_check(int row,int n,vector<string> &board)
    {
        //on the fact that only one queen can be placed in a queen. Thus if a queen is placed we move to the next row.
        if(row==n)
        {
            ans.push_back(board);
            return;
        }
        for(int col=0;col<n;col++)
        {
            if(!column[col] && !posDiag[n+row-col] && !negDiag[row+col])
            {
                board[row][col]='Q';
                column[col]=true;
                posDiag[n+row-col]=true;
                negDiag[row+col]=true;
                do_check(row+1,n,board);
                
                board[row][col]='.';
                column[col]=false;
                posDiag[n+row-col]=false;
                negDiag[row+col]=false;
                
            }
        }
    }
    
    
    
    
    vector<vector<string>> solveNQueens(int n) {
        vector<string> board(n, string(n,'.'));
        //starting from row - 0 till n
        do_check(0,n,board);
        return ans;
        
    }
};

optimized solution: runs faster than above solution
---------------------------------------------------
(BUT we write according to the given constraint: 1<=n<=9. NOT applicable for n>9)

class Solution {
public:
    vector<vector<string>> ans;
    //for maximum 1-9 columns since given constraint 1<=n<=9
    //2n-1 elements - > approx 2n+1
    bool column[9],posDiag[20],negDiag[20];
    
    void do_check(int row,int n,vector<string> &board)
    {
        //on the fact that only one queen can be placed in a queen. Thus if a queen is placed we move to the next row.
        if(row==n)
        {
            ans.push_back(board);
            return;
        }
        for(int col=0;col<n;col++)
        {
            if(!column[col] && !posDiag[n+row-col] && !negDiag[row+col])
            {
                board[row][col]='Q';
                column[col]=true;
                posDiag[n+row-col]=true;
                negDiag[row+col]=true;
                do_check(row+1,n,board);
                
                board[row][col]='.';
                column[col]=false;
                posDiag[n+row-col]=false;
                negDiag[row+col]=false;
                
            }
        }
    }
    
    
    
    
    vector<vector<string>> solveNQueens(int n) {
        vector<string> board(n, string(n,'.'));
        //starting from row - 0 till n
        do_check(0,n,board);
        return ans;
        
    }
};
