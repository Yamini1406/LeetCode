Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.

A leaf is a node with no children.

 
Example 1:

Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true
Explanation: The root-to-leaf path with the target sum is shown.
Example 2:


Input: root = [1,2,3], targetSum = 5
Output: false
Explanation: There two root-to-leaf paths in the tree:
(1 --> 2): The sum is 3.
(1 --> 3): The sum is 4.
There is no root-to-leaf path with sum = 5.
Example 3:

Input: root = [], targetSum = 0
Output: false
Explanation: Since the tree is empty, there are no root-to-leaf paths.

SOLUTION
--------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
class Solution {
    //static int sum = 0;
    public boolean hasPathSum(TreeNode root, int targetSum) {
        // if(root==null || sum>targetSum) return false;
        // if(sum==targetSum) return true;
        // sum+=root.val;
        // if(root.left!=null) hasPathSum(root.left,targetSum);
        // if(sum>targetSum) sum-=root.val;
        // if(root.right!=null) hasPathSum(root.right,targetSum);
        // if(sum>targetSum) sum-=root.val;
        //should definitely have a return statement
        
        if(root == null) return false; //base condition
        
        if(root.left == null && root.right == null && targetSum == root.val) return true; //the path must end with a leaf node
        targetSum-=root.val;
        //must have a return stmt
        return (hasPathSum(root.left,targetSum) || hasPathSum(root.right,targetSum));
    }
}

pretty straightforward! but the trick here is we have to return something during every recursion -> what is that statement?..if any side(left/right) satisfies the condition true is returned.
And main conditions: soln should start from root and end with leaf node.
